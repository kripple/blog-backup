<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ruby on Kelly Ripple</title>
    <link>https://kripple.github.io/tags/ruby/</link>
    <description>Recent content in Ruby on Kelly Ripple</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>kelly.ripple@bti360.com (Kelly Ripple)</managingEditor>
    <webMaster>kelly.ripple@bti360.com (Kelly Ripple)</webMaster>
    <lastBuildDate>Sun, 12 Jul 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://kripple.github.io/tags/ruby/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Ruby vs. Javascript</title>
      <link>https://kripple.github.io/post/ruby-vs-javascript/</link>
      <pubDate>Sun, 12 Jul 2015 00:00:00 +0000</pubDate>
      <author>kelly.ripple@bti360.com (Kelly Ripple)</author>
      <guid>https://kripple.github.io/post/ruby-vs-javascript/</guid>
      <description>I used JavaScript for the first time this week (woo!). This post will be about JavaScript, the programming language, and how it differs in syntax and useability from a few other languages.
I first learned how to program in high school. The year was 2007 and the language was Visual Basic. To me, it was a simple, easy to use, easy to learn language. In college I learned C, along with the basics of computer organization and machine languages.</description>
    </item>
    
    <item>
      <title>Ruby Building Blocks</title>
      <link>https://kripple.github.io/post/ruby-building-blocks/</link>
      <pubDate>Mon, 22 Jun 2015 00:00:00 +0000</pubDate>
      <author>kelly.ripple@bti360.com (Kelly Ripple)</author>
      <guid>https://kripple.github.io/post/ruby-building-blocks/</guid>
      <description>I feel like a toddler. My brain hurts and nothing makes sense. The internet insists on explaining things to me like I already know things. Dear Internet, I most certainly do not. I have included here the stuff that did make sense. May these humble building blocks aid you in your own pursuit of understanding.
Modules vs. Classes From my blog post on the map method, a module is a way of grouping together methods, classes, and constants - a collection of reuseable code.</description>
    </item>
    
    <item>
      <title>Lets Get Classy</title>
      <link>https://kripple.github.io/post/lets-get-classy/</link>
      <pubDate>Sun, 21 Jun 2015 00:00:00 +0000</pubDate>
      <author>kelly.ripple@bti360.com (Kelly Ripple)</author>
      <guid>https://kripple.github.io/post/lets-get-classy/</guid>
      <description>I learned how to use a new Ruby &amp;lsquo;thing&amp;rsquo; this week: Classes. To be completely honest with you, I don&amp;rsquo;t completely understand what&amp;rsquo;s going on with the Ruby &amp;lsquo;class&amp;rsquo; object, but I&amp;rsquo;ve been using it, and I think I can do a reasonably competent job explaining the basics. Also this week, I learned some new tricks for arrays and hashes. Check them out at the end of my post from a few weeks ago.</description>
    </item>
    
    <item>
      <title>Method: Map</title>
      <link>https://kripple.github.io/post/method-map/</link>
      <pubDate>Sun, 14 Jun 2015 00:00:00 +0000</pubDate>
      <author>kelly.ripple@bti360.com (Kelly Ripple)</author>
      <guid>https://kripple.github.io/post/method-map/</guid>
      <description>I&amp;rsquo;m quite new to the realm of Ruby. Don&amp;rsquo;t get me wrong, I&amp;rsquo;m a hughe fan. There are just a few things (many, many things) that I don&amp;rsquo;t quite understand yet. I&amp;rsquo;m going to throw some concept descriptions down below, but just so you know where I&amp;rsquo;m going with this - this post is about the Ruby &amp;lsquo;map&amp;rsquo; method. It&amp;rsquo;s a super-simple, super-useful method. See below for descriptions and examples.</description>
    </item>
    
    <item>
      <title>Hash-tastic</title>
      <link>https://kripple.github.io/post/hashtastic/</link>
      <pubDate>Mon, 08 Jun 2015 00:00:00 +0000</pubDate>
      <author>kelly.ripple@bti360.com (Kelly Ripple)</author>
      <guid>https://kripple.github.io/post/hashtastic/</guid>
      <description>This week I learned about the glorious data storage object that is the Hash. The following will be some fun information on how to differentiate, define, and reference arrays and hashes. Arrays and hashes are both constucts used for data storage. Their construction and syntax are different, so depending on what you&amp;rsquo;re trying to do, one will likely be better than the other for specific applications.
Define Array Ordered, iteger-indexed collections of any object.</description>
    </item>
    
  </channel>
</rss>